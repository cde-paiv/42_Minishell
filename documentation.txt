                    Documentação do Projeto Minishell

                        STRUCT'S

1.1 Definições e Constantes

BUFFER_SIZE: Define o tamanho do buffer para operações de leitura. O valor padrão é 1024.
Códigos de Erro:
SYNTAX_MISPELL: Código de erro para erro de sintaxe.
NO_PERMISSION: Código de erro para permissão negada.
CMD_NOT_FOUND: Código de erro para comando não encontrado.
EXIT_SIGINT: Código de saída para interrupção (SIGINT).
EXIT_SIGQUIT: Código de saída para saída (SIGQUIT).
WRONG_SYNTAX: Código de erro para sintaxe errada.

1.2 Estruturas

t_vars: Estrutura que contém variáveis relacionadas ao estado do shell.
bool sh_status: Status do shell.
int tk_num: Número de tokens.
int cmds_num: Número de comandos.
int redir_tot: Número de redirecionamentos.
int heredoc_num: Número de heredocs.
int pipe_num: Número de pipes.
int is_pipe: Indica se é um pipe.
int envp_total: Total de variáveis de ambiente.

t_tokens: Estrutura que representa tokens individuais.
int num: Número do token.
char *tokens: String do token.
Vários flags booleanos para indicar o tipo de token (comando, argumento, pipe, etc.).

t_error: Estrutura que contém informações sobre erros.
Vários flags booleanos para diferentes tipos de erros (erro de saída, erro de comando, erro de heredoc, etc.).

t_execerror: Estrutura que contém informações sobre erros de execução.
Vários flags booleanos para diferentes tipos de erros de execução (comando não encontrado, arquivo de entrada inválido, etc.).

t_exec: Estrutura que contém informações sobre a execução de comandos.
int n_args: Número de argumentos.
char *cmd: Comando a ser executado.
char **arg: Array de argumentos.
Vários campos para gerenciar redirecionamentos e pipes.

t_sh: Estrutura principal do shell que contém todas as informações necessárias para a execução.
t_exec *comands: Array de comandos a serem executados.
t_tokens *tokens: Array de tokens.
t_vars vars: Variáveis do shell.
char *cmd_line: Linha de comando atual.
char **envp: Array de variáveis de ambiente.
t_error error: Estrutura de erro.
1.3 Funções

PROMPT.c
char *get_prompt(t_sh *sh): Obtém o prompt do shell.
char *join_2_str(char *a, char *b, char *z, int option): Junta duas strings.

PROMPT_UTILS.c
void ft_getenv(t_sh *sh, char **envp): Inicializa as variáveis de ambiente.
char *find_my_host(t_sh *sh): Encontra o host atual.

FREE.c
Funções para liberar memória alocada para tokens, matrizes, comandos, variáveis de ambiente e para finalizar o shell.

ERRORS.c
bool filter_cmd_error(t_sh *sh): Filtra erros de comando.
bool verify_errors(t_sh *sh): Verifica erros.

INIT.c
Funções para inicializar variáveis de erro, tokens, parser e ciclo principal do shell.

SIGNALS.c
Funções para configurar e gerenciar sinais.

TOKEN.c
Funções para preparar e contar tokens.

SPLIT_CMD.c
void split_cmd(t_sh *sh): Divide comandos.

BUILTINS.c
Funções para implementar comandos internos do shell, como echo, pwd, cd, unset, exit, env, e export.

EXECUTER.c
Funções para executar comandos e gerenciar a execução de múltiplos comandos.

PIPE.c
Funções para gerenciar pipes.


                    EXECUTER_UTILS

2.1 bool check_exec_error(t_sh *sh, int x)
Verifica se houve algum erro na execução de um comando.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os comandos.
int x: Índice do comando a ser verificado.

Retorno:
true se um erro foi encontrado e tratado, false caso contrário.

Descrição: Esta função verifica se houve erros na execução de um comando específico, como comando não encontrado, pipe vazio ou problemas de acesso a arquivos de entrada ou saída. Se um erro for encontrado, uma mensagem apropriada é exibida e o status global é atualizado.

2.2 bool check_if_builtin(char *cmd)
Verifica se um comando é um comando interno (builtin) do shell.

Parâmetros:
char *cmd: O comando a ser verificado.

Retorno:
true se o comando for um builtin, false caso contrário.
Descrição: Esta função compara o comando fornecido com uma lista de comandos internos do shell, como echo, cd, pwd, export, unset, env e exit. Retorna um valor booleano indicando se o comando é um builtin.

2.3 void exec_builtin(t_sh *sh, int cmd_nbr)
Executa um comando interno (builtin) com base no índice fornecido.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os comandos.
int cmd_nbr: Índice do comando a ser executado.

Descrição: Esta função executa o comando interno correspondente ao índice fornecido na estrutura de comandos. Dependendo do comando, a função apropriada (ft_echo, ft_cd, ft_pwd, etc.) é chamada para realizar a operação.

2.4 static char *prep_cmd_helper(char *temp, char **path, char *cmd)
Função auxiliar para preparar o comando, verificando se ele existe em um dos diretórios do PATH.

Parâmetros:
char *temp: Caminho temporário do comando.
char **path: Array de diretórios do PATH.
char *cmd: O comando a ser verificado.

Retorno:
Um ponteiro para a string que representa o caminho do comando preparado.
Descrição: Esta função verifica se o comando existe em um dos diretórios especificados no PATH. Se o comando não for encontrado, ele retorna o comando original. Caso contrário, retorna o caminho completo do comando.

2.5 char *prep_cmd(t_sh *sh, char *cmd, int xx)
Prepara o comando para execução, verificando se ele é um caminho absoluto ou se deve ser buscado no PATH.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os comandos.
char *cmd: O comando a ser preparado.
int xx: Índice do comando na estrutura.

Retorno:Um ponteiro para a string que representa o caminho do comando preparado.

Descrição: Esta função verifica se o comando é um caminho absoluto. Se não for, ela busca o comando nos diretórios especificados na variável de ambiente PATH. Se o comando não for encontrado, ele marca o erro correspondente na estrutura de comandos.

                    EXECUTER

3.1 void execute_cmd(t_sh *sh, int x)
Executa um comando em um novo processo.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os comandos.
int x: Índice do comando a ser executado.

Descrição: Esta função verifica se houve algum erro na execução do comando usando check_exec_error. Se não houver erros, ela cria um novo processo usando fork(). No processo filho, tenta executar o comando usando execve(). Se a execução falhar, uma mensagem de erro é exibida e o status global é atualizado. O processo pai aguarda a conclusão do processo filho.

3.2 static void executor_for_one(t_sh *sh, int x)
Executa um único comando, lidando com redirecionamentos e verificando se é um comando interno.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os comandos.
int x: Índice do comando a ser executado (inicialmente definido como 0).

Descrição: Esta função lida com redirecionamentos de entrada e saída para o comando especificado. Verifica se o comando é um builtin usando check_if_builtin. Se for, executa o comando interno. Caso contrário, prepara o comando usando prep_cmd e executa-o com execute_cmd. Após a execução, restaura os descritores de arquivo de entrada e saída, se necessário.

3.3 void executor(t_sh *sh)
Executa os comandos armazenados na estrutura do shell.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os comandos.

Descrição: Esta função verifica se há erros usando verify_errors. Se não houver erros e houver comandos a serem executados, ela chama executor_for_one para executar o primeiro comando. Se houver mais de um comando, chama check_pipes para lidar com a execução de comandos encadeados por pipes.

                EXPANDER_UTILS

4.1 char *expand_exit(t_sh *sh, int n, int x, char *z)
Expande uma sequência de tokens, concatenando-os a uma string existente.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.
int n: Índice do token a ser expandido.
int x: Índice do caractere atual dentro do token.
char *z: String à qual os tokens expandidos serão concatenados.

Retorno:
Um ponteiro para a nova string resultante da concatenação.

Descrição: Esta função percorre os tokens a partir do índice x e os concatena à string z. A nova string resultante é retornada. O buffer a é usado para armazenar temporariamente os tokens antes da concatenação.

4.2 int ft_envp_n_cmp(const char *s1, const char *s2)
Compara duas strings, verificando se a primeira string é igual à parte antes do sinal de igual da segunda string.

Parâmetros:
const char *s1: A primeira string a ser comparada.
const char *s2: A segunda string a ser comparada.

Retorno:
Um inteiro que indica a comparação:
0 se as strings forem iguais até o sinal de igual.
Um valor negativo se s1 for menor que s2.
Um valor positivo se s1 for maior que s2.
Descrição: Esta função compara s1 com a parte da string s2 que precede o sinal de igual (=). Se s1 for igual a essa parte, retorna 0. Caso contrário, retorna a diferença entre os caracteres.

4.3 char *search_envp(t_sh *sh, char *z)
Busca uma variável de ambiente na lista de variáveis de ambiente.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e as variáveis de ambiente.
char *z: Nome da variável de ambiente a ser buscada.

Retorno:
Um ponteiro para o valor da variável de ambiente, ou NULL se não for encontrada.
Descrição: Esta função percorre a lista de variáveis de ambiente (envp) e compara cada variável com o nome fornecido (z). Se encontrar uma correspondência, retorna o valor associado a essa variável. Caso contrário, retorna NULL.

4.4 int count_expands(t_sh *sh, int n)
Conta o número de expansões necessárias em um token.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.
int n: Índice do token a ser analisado.

Retorno:
Um inteiro representando o número de expansões necessárias.
Descrição: Esta função percorre os tokens e conta quantas expansões são necessárias, considerando variáveis de ambiente (precedidas por $), o caractere ~ e os casos especiais de $ seguidos por $ ou ?. O contador é incrementado para cada ocorrência válida.

                    EXPANDER

5.1 char *pre_expand(t_sh *sh, int *x, int n)
Extrai uma sequência de caracteres de um token até encontrar um caractere de expansão ($ ou ~).

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.
int *x: Ponteiro para o índice atual do token.
int n: Índice do token a ser processado.

Retorno:
Um ponteiro para a string extraída, ou NULL em caso de falha de alocação.
Descrição: Esta função percorre os tokens a partir do índice *x e extrai uma sequência de caracteres até encontrar um caractere de expansão. A sequência extraída é armazenada em uma nova string, que é retornada.

5.2 char *expand_token_seeker2(t_sh *sh, int *x, int n, char *c)
Procura e expande variáveis de ambiente ou o status do último comando.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.
int *x: Ponteiro para o índice atual do token.
int n: Índice do token a ser processado.
char *c: String que pode ser atualizada com o resultado da expansão.

Retorno:
Um ponteiro para a string resultante da expansão, ou NULL se não houver expansão.
Descrição: Esta função verifica se o token atual é um caractere de expansão ($ ou ~). Se for, ela expande a variável de ambiente correspondente ou o status do último comando. O resultado é armazenado na string c, que é retornada.

5.3 char *expand_token_seeker(t_sh *sh, int *x, int n)
Procura e expande tokens que podem ser variáveis de ambiente ou o PID do processo.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.
int *x: Ponteiro para o índice atual do token.
int n: Índice do token a ser processado.

Retorno:
Um ponteiro para a string resultante da expansão, ou NULL se não houver expansão.
Descrição: Esta função verifica o token atual e, dependendo do seu valor, chama search_envp para expandir variáveis de ambiente ou retorna o PID do processo. O resultado é retornado como uma string.

5.4 void expand_token(t_sh *sh, int n)
Expande todos os tokens de um comando, substituindo variáveis de ambiente e caracteres especiais.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.
int n: Índice do token a ser expandido.

Descrição: Esta função conta o número de expansões necessárias e itera sobre os tokens, chamando pre_expand e expand_token_seeker para construir a nova string expandida. A string resultante substitui os tokens originais na estrutura.

5.5 void search_expand(t_sh *sh)
Procura e expande tokens em todos os comandos armazenados na estrutura do shell.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.

Descrição: Esta função itera sobre todos os tokens e verifica se eles precisam ser expandidos. Se um token requer expansão, chama expand_token. A função também lida com casos especiais, como tokens dentro de aspas duplas ou simples.

                    INIT_UTILS

6.1 void init_tk_flag1(t_sh *sh, int x)
Inicializa as flags de um token específico na estrutura do shell.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.
int x: Índice do token a ser inicializado.

Descrição: Esta função define todas as flags do token no índice x como false. Isso é útil para garantir que o estado do token esteja limpo antes de ser processado, evitando que informações residuais de execuções anteriores afetem o comportamento do shell.

6.2 void init_cmds(t_sh *sh, int x)
Inicializa os campos de um comando específico na estrutura do shell.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os comandos.
int x: Índice do comando a ser inicializado.

Descrição: Esta função define todos os campos do comando no índice x para seus valores padrão. Isso inclui a inicialização de pipes, redirecionamentos, arquivos de entrada e saída, e a contagem de argumentos. Também inicializa as flags de erro para garantir que não haja erros residuais de execuções anteriores.

6.3 void init_vars(t_sh *sh)
Inicializa as variáveis de controle do shell.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Descrição: Esta função define as variáveis de controle do shell, como o número de tokens, comandos, pipes, redirecionamentos e heredocs, todos como zero. Isso é importante para garantir que o shell comece em um estado limpo e que as contagens sejam precisas durante a execução.

                    INIT

7.1 void init_error(t_sh *sh)

Descrição:Inicializa as flags de erro na estrutura do shell.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função define todas as flags de erro na estrutura sh->error como false. Isso é útil para garantir que o estado de erro esteja limpo antes de processar novos comandos, evitando que erros residuais afetem o comportamento do shell.

7.2 void init_tokens(t_sh *sh)

Descrição:Inicializa a estrutura de tokens na estrutura do shell.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função aloca memória para a estrutura de tokens com base no número de tokens (sh->vars.tk_num). Se não houver tokens, a função retorna imediatamente. Para cada token, inicializa o número do token e as flags associadas chamando init_tk_flag1. Se a alocação de memória falhar, o programa é encerrado com EXIT_FAILURE.

7.3 void init_parser(t_sh *sh)

Descrição:Inicializa a estrutura de comandos na estrutura do shell.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função aloca memória para a estrutura de comandos com base no número de comandos (sh->vars.cmds_num). Se não houver comandos, a função retorna imediatamente. Para cada comando, inicializa os campos chamando init_cmds. Se a alocação de memória falhar, o programa é encerrado com EXIT_FAILURE.

7.4 void init_cycle(t_sh *sh)

Descrição:Inicializa o ciclo do shell, configurando o estado inicial.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função define o status do shell como ativo (sh->vars.sh_status = true), configura o tratamento de sinais chamando ft_sigset, e inicializa as variáveis do shell chamando init_vars. Se a linha de comando (sh->cmd_line) já estiver alocada, ela é liberada para evitar vazamentos de memória.

                        PARSE_UTILS_QUOTES

8.1 static char *clean_quote(char *str)

Descrição:Remove as aspas de uma string, retornando uma nova string sem as aspas.

Parâmetros:char *str: A string original que pode conter aspas.

Retorno:Um ponteiro para a nova string sem as aspas, ou NULL em caso de falha de alocação.

Detalhes:Esta função aloca memória para uma nova string e copia os caracteres da string original, excluindo o primeiro e o último caractere (que são considerados aspas). A string original é liberada após a cópia. A nova string é retornada.

8.2 void remove_quoted(t_sh *sh)

Descrição:Remove aspas de todos os tokens na estrutura do shell.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.

Detalhes:Esta função itera sobre todos os tokens na estrutura do shell. Se um token contém aspas duplas (d_quote) ou aspas simples (s_quote), a função clean_quote é chamada para remover as aspas do token correspondente. A função não faz nada se não houver tokens a serem processados.

                    PARSE_UTILS

9.1 static bool ft_if_redir(t_sh *sh, int x)
Descrição:Verifica se um token específico está associado a um redirecionamento válido.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.
int x: Índice do token a ser verificado.

Retorno:true se o redirecionamento for válido, false caso contrário.

Detalhes:Esta função verifica se o token no índice x está associado a um redirecionamento (entrada, saída, heredoc ou append) e se o próximo token é um arquivo válido. Retorna true se o redirecionamento é válido e false caso contrário.

9.2 int parse_with_args(t_sh *sh, int n_cmd, int x, int narg)

Descrição:Analisa um comando que possui argumentos e redirecionamentos.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int n_cmd: Índice do comando a ser analisado.
int x: Índice atual dos tokens.
int narg: Contador de argumentos.

Retorno:O novo índice x após a análise.

Detalhes:Esta função aloca memória para os argumentos do comando e copia os tokens correspondentes. Se houver redirecionamentos associados, eles são processados e armazenados na estrutura do comando. A função retorna o índice atualizado após a análise.

9.3 int parse_no_args(t_sh *sh, int n_cmd, int x)

Descrição:Analisa um comando que não possui argumentos.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int n_cmd: Índice do comando a ser analisado.
int x: Índice atual dos tokens.

Retorno:O novo índice x após a análise.

Detalhes:Esta função aloca memória para o comando e inicializa os argumentos. Se houver redirecionamentos, eles são processados e armazenados na estrutura do comando. A função retorna o índice atualizado após a análise.

9.4 int parse_no_cmds(t_sh *sh, int n_cmd, int x)

Descrição:Analisa a situação em que não há comandos, mas apenas tokens.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int n_cmd: Índice do comando a ser analisado.
int x: Índice atual dos tokens.

Retorno:O novo índice x após a análise.

Detalhes:Esta função aloca memória para o comando e copia todos os tokens restantes como argumentos. A função retorna o índice atualizado após a análise.

9.5 int parse_utils(t_sh *sh, int x, int n_cmd)

Descrição:Utiliza funções auxiliares para analisar comandos e argumentos.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int x: Índice atual dos tokens.
int n_cmd: Índice do comando a ser analisado.

Retorno:O novo índice x após a análise.

Detalhes:Esta função verifica se o token atual é um comando e, em seguida, chama parse_with_args ou parse_no_args conforme necessário. Se não houver comandos, chama parse_no_cmds. A função retorna o índice atualizado após a análise.

9.6 int parse_pipes(t_sh *sh, int z, int n_cmd)

Descrição:Analisa a presença de pipes em um comando.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int z: Índice atual dos tokens.
int n_cmd: Índice do comando a ser analisado.
Retorno:O novo índice x após a análise.

Detalhes:Esta função verifica se o token atual é um pipe e, se for, marca o comando correspondente como utilizando pipes. A função retorna o índice atualizado após a análise.

                        PARSE

10.1 bool check_r_append_out(t_sh *sh)
Descrição:Verifica se há um redirecionamento de saída com append sem um arquivo associado.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.

Retorno:true se houver um redirecionamento de saída com append sem um arquivo associado, false caso contrário.

Detalhes:Esta função itera sobre os tokens e verifica se algum token possui um redirecionamento de saída com append (r_outappend). Se encontrar um, verifica se o próximo token é um arquivo. Retorna true se não houver arquivo associado, e false se houver.

10.2 bool check_r_out(t_sh *sh)
Descrição:Verifica se há um redirecionamento de saída sem um arquivo associado.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.
Retorno:true se houver um redirecionamento de saída sem um arquivo associado, false caso contrário.

Detalhes:Esta função itera sobre os tokens e verifica se algum token possui um redirecionamento de saída (r_out). Se encontrar um, verifica se o próximo token é um arquivo. Retorna true se não houver arquivo associado, e false se houver.

10.3 bool check_r_in(t_sh *sh)
Descrição:Verifica se há um redirecionamento de entrada sem um arquivo associado.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.
Retorno:true se houver um redirecionamento de entrada sem um arquivo associado, false caso contrário.

Detalhes:Esta função itera sobre os tokens e verifica se algum token possui um redirecionamento de entrada (r_in). Se encontrar um, verifica se o próximo token é um arquivo. Retorna true se não houver arquivo associado, e false se houver.

10.4 bool check_before_parse(t_sh *sh)
Descrição:Verifica se há aspas não fechadas nos tokens.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell e os tokens.

Retorno:true se houver aspas não fechadas, false caso contrário.

Detalhes:Esta função itera sobre os tokens e verifica se algum token possui a flag de aspas (f_quote) ativada. Retorna true se encontrar aspas não fechadas, e false caso contrário.

10.5 void fill_parser(t_sh *sh)
Descrição:Preenche a estrutura do parser com comandos e argumentos a partir dos tokens.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função verifica se o shell está ativo (sh_status). Se estiver, chama remove_quoted para limpar as aspas dos tokens. Em seguida, itera sobre os tokens, chamando parse_utils para processar comandos e argumentos, e parse_pipes para verificar a presença de pipes. A função continua até que todos os tokens sejam processados ou até que não haja mais tokens a serem analisados.

                    PROMPT_UTILS

11.1 void ft_getenv(t_sh *sh, char **envp)
Descrição:Inicializa a variável de ambiente do shell a partir de um array de strings de ambiente.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char **envp: Array de strings que contém as variáveis de ambiente.

Detalhes:Esta função conta o número de variáveis de ambiente no array envp e aloca memória para armazená-las na estrutura do shell (sh->envp). Em seguida, copia cada variável de ambiente do array envp para sh->envp usando ft_strdup. A última posição de sh->envp é definida como NULL para indicar o final da lista.

11.2 char *find_my_host(t_sh *sh)
Descrição:Encontra e retorna o nome do host a partir da variável de ambiente SESSION_MANAGER.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Retorno:Um ponteiro para uma string que contém o nome do host, ou NULL em caso de falha.

Detalhes:Esta função busca a variável de ambiente SESSION_MANAGER usando search_envp. Em seguida, extrai o nome do host da string retornada, que está entre a primeira barra (/) e o primeiro dois-pontos (:). A função aloca memória para armazenar o nome do host, copia a parte relevante da string e retorna o resultado. A memória temporária utilizada para armazenar a string intermediária é liberada antes de retornar.

                        PROMPT

12.1 static int verify_helper(t_sh *sh, char *prompt, int x)
Descrição:Verifica se o início do prompt corresponde ao diretório HOME do usuário.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char *prompt: A string do prompt a ser verificada.
int x: Índice atual na string do prompt.
Retorno:O índice x onde a correspondência com o diretório HOME termina.

Detalhes:Esta função busca a variável de ambiente HOME e compara os caracteres do prompt com os caracteres do diretório HOME. Se o primeiro caractere do prompt não corresponder ao primeiro caractere do diretório HOME, retorna o índice x. Caso contrário, continua a comparação até que os caracteres não correspondam mais.

12.2 static char *verify_home(t_sh *sh, char *prompt)
Descrição:Substitui o diretório HOME no prompt por ~ ou /.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char *prompt: A string do prompt a ser modificada.
Retorno:Um ponteiro para a nova string do prompt, com o diretório HOME substituído.

Detalhes:Esta função utiliza verify_helper para determinar até onde o prompt corresponde ao diretório HOME. Em seguida, aloca memória para uma nova string do prompt, substitui o início correspondente por ~ ou /, e copia o restante do prompt. A string original do prompt é liberada antes de retornar a nova string.

12.3 char *join_2_str(char *a, char *b, char *z, int option)
Descrição:Concatena duas strings, com uma string opcional entre elas.

Parâmetros:
char *a: Primeira string.
char *b: Segunda string.
char *z: String opcional a ser inserida entre a e b.
int option: Indica se as strings a e b devem ser liberadas após a concatenação.

Retorno:Um ponteiro para a nova string concatenada.

Detalhes:Esta função verifica se a string opcional z é fornecida. Se for, concatena a, z e b em uma nova string. Se não, apenas concatena a e b. Dependendo do valor de option, as strings originais podem ser liberadas. A nova string concatenada é retornada.

12.4 char *get_prompt(t_sh *sh)
Descrição:Gera o prompt do shell com informações do usuário, host e diretório atual.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
Retorno:Um ponteiro para a string do prompt gerado.

Detalhes:Esta função busca o nome do usuário e o nome do host usando search_envp e find_my_host, respectivamente. Em seguida, concatena essas informações com um @ usando join_2_str. Depois, busca o diretório atual (PWD), verifica e modifica o diretório HOME usando verify_home, e finalmente concatena todas as partes do prompt com espaços e um símbolo de dólar ($). A string final do prompt é retornada.

                        REDIR

13.1 static void handle_redir_in(t_sh *sh, int x)
Descrição:Gerencia o redirecionamento de entrada para um comando.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int x: Índice do comando que está sendo processado.

Detalhes:Esta função tenta abrir o arquivo de entrada especificado pelo comando e redirecionar a entrada padrão (STDIN) para esse arquivo. Se a abertura do arquivo falhar, um erro é registrado. Se a operação de redirecionamento for bem-sucedida, o descritor de arquivo original é salvo para possível restauração posterior. O descritor de arquivo do arquivo de entrada é fechado após o redirecionamento.

13.2 static void handle_redir_inhere(t_sh *sh, int x)
Descrição:Gerencia o redirecionamento de entrada a partir de um heredoc.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int x: Índice do comando que está sendo processado.

Detalhes:Esta função chama handle_heredoc para processar o heredoc e, em seguida, tenta abrir o arquivo do heredoc para redirecionar a entrada padrão (STDIN). Se a abertura falhar, um erro é registrado. Se o redirecionamento for bem-sucedido, o descritor de arquivo original é salvo. Se não houver arquivos de saída válidos, e o comando for cat, o arquivo do heredoc é copiado para infile. O descritor de arquivo do heredoc é fechado após o redirecionamento.

13.3 static void handle_redir_out(t_sh *sh, int x)
Descrição:Gerencia o redirecionamento de saída para um comando.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int x: Índice do comando que está sendo processado.

Detalhes:Esta função tenta abrir o arquivo de saída especificado pelo comando e redirecionar a saída padrão (STDOUT) para esse arquivo. Se a abertura do arquivo falhar, um erro é registrado. Se a operação de redirecionamento for bem-sucedida, o descritor de arquivo original é salvo. O descritor de arquivo do arquivo de saída é fechado após o redirecionamento.

13.4 static void handle_redir_outapp(t_sh *sh, int x)
Descrição:Gerencia o redirecionamento de saída com append para um comando.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int x: Índice do comando que está sendo processado.

Detalhes:Esta função tenta abrir o arquivo de saída com a opção de append e redirecionar a saída padrão (STDOUT) para esse arquivo. Se a abertura do arquivo falhar, um erro é registrado. Se a operação de redirecionamento for bem-sucedida, o descritor de arquivo original é salvo. O descritor de arquivo do arquivo de saída com append é fechado após o redirecionamento.

13.5 void handle_redirects(t_sh *sh, int x)
Descrição:Gerencia todos os redirecionamentos para um comando específico.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int x: Índice do comando que está sendo processado.

Detalhes:Esta função verifica se o comando possui redirecionamentos. Se houver, chama as funções apropriadas para gerenciar os redirecionamentos de entrada e saída, incluindo heredocs e arquivos de saída. A função não faz nada se não houver redirecionamentos associados ao comando.

                        SIGNALS

14.1 void ft_sigset(void)
Descrição:Configura os manipuladores de sinal para o shell.

Detalhes:Esta função define o manipulador de sinal para SIGINT como ft_signal_handler, enquanto ignora os sinais SIGQUIT e SIGTERM. Isso permite que o shell trate a interrupção do usuário (Ctrl+C) de maneira personalizada, enquanto ignora os sinais de término e de saída.

14.2 void ft_sigset_fd(void)
Descrição:Configura os manipuladores de sinal para o shell em um contexto de redirecionamento de entrada/saída.

Detalhes:Esta função define o manipulador de sinal para SIGINT como ft_signal_handfd, enquanto ignora os sinais SIGQUIT e SIGTERM. Isso é útil quando o shell está em um estado onde a entrada/saída pode estar redirecionada, permitindo um tratamento diferente para a interrupção do usuário.

14.3 void ft_signal_handler(int sig)
Descrição:Manipulador de sinal para SIGINT.

Parâmetros:
int sig: O número do sinal recebido.

Detalhes:Quando o sinal SIGINT é recebido, esta função limpa a linha atual no prompt, escreve uma nova linha e atualiza a exibição do prompt. Isso permite que o usuário veja um novo prompt após pressionar Ctrl+C, em vez de ver a linha anterior.

14.4 void ft_signal_handfd(int sig)
Descrição:Manipulador de sinal para SIGINT em um contexto de redirecionamento de entrada/saída.

Parâmetros:
int sig: O número do sinal recebido.

Detalhes:Quando o sinal SIGINT é recebido, esta função escreve uma nova linha no STDERR_FILENO. Isso é útil para fornecer feedback ao usuário em situações onde a entrada/saída pode estar redirecionada, sem interferir na linha de comando atual.

                        SPLIT_CMD

15.1 static int split_quote(t_sh *sh, int x, int n)
Descrição:Divide a linha de comando em tokens, considerando as aspas.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int x: Índice atual na linha de comando.
int n: Índice do token a ser preenchido.
Retorno:O novo índice x após a divisão.

Detalhes:Esta função verifica o tipo de aspas (simples ou duplas) na linha de comando e calcula o comprimento do token entre as aspas. Em seguida, aloca memória para armazenar o token e copia os caracteres da linha de comando para o token. O token é finalizado com um caractere nulo (\0).

15.2 static int split_cicle(t_sh *sh, int x, int n)
Descrição:Divide a linha de comando em tokens, considerando espaços como delimitadores.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int x: Índice atual na linha de comando.
int n: Índice do token a ser preenchido.

Retorno:O novo índice x após a divisão.

Detalhes:Esta função conta o número de caracteres até o próximo espaço na linha de comando e aloca memória para armazenar o token. Em seguida, copia os caracteres até o espaço para o token e finaliza o token com um caractere nulo (\0).

15.3 void split_cmd(t_sh *sh)

Descrição:Divide a linha de comando em tokens, chamando as funções apropriadas para lidar com aspas e espaços.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função verifica se o shell está ativo e se há tokens a serem processados. Em seguida, itera sobre a linha de comando, chamando split_quote quando encontra aspas e split_cicle quando encontra espaços. O loop continua até que todos os tokens sejam processados ou até que o final da linha de comando seja alcançado.

                    TOKEN_CHECKER_UTILS

16.1 bool check_if_dquote(char *str, int x_o)
Descrição:Verifica se há um número ímpar de aspas duplas a partir de um índice específico na string.

Parâmetros:
char *str: A string a ser verificada.
int x_o: O índice onde a verificação deve começar.
Retorno:true se houver um número ímpar de aspas duplas após o índice x_o, indicando que a última aspa dupla não está fechada; false caso contrário.

Detalhes:Esta função começa a contar a partir do índice x_o e verifica se o caractere nesse índice é uma aspa dupla ("). Em seguida, conta quantas aspas duplas aparecem após esse índice. Se o contador for ímpar, isso significa que a última aspa dupla não foi fechada, e a função retorna true. Caso contrário, retorna false.

16.2 bool check_if_squote(char *str, int x_o)
Descrição:Verifica se há um número ímpar de aspas simples a partir de um índice específico na string.

Parâmetros:
char *str: A string a ser verificada.
int x_o: O índice onde a verificação deve começar.
Retorno:true se houver um número ímpar de aspas simples após o índice x_o, indicando que a última aspa simples não está fechada; false caso contrário.

Detalhes:Esta função funciona de maneira semelhante a check_if_dquote, mas verifica aspas simples ('). Ela conta quantas aspas simples aparecem após o índice x_o e retorna true se o contador for ímpar, indicando que a última aspa simples não foi fechada.

16.3 bool search_ext(char *str)
Descrição:Verifica se uma string contém um ponto (.), indicando uma possível extensão de arquivo.

Parâmetros:
char *str: A string a ser verificada.
Retorno:true se a string contém pelo menos um ponto; false caso contrário.

Detalhes:Esta função calcula o comprimento da string e itera de trás para frente, verificando se algum dos caracteres é um ponto (.). Se encontrar um ponto, retorna true. Se a iteração terminar sem encontrar um ponto, retorna false.

                    TOKEN_CHECKER

17.1 bool token_is_valid(char src)
Descrição:Verifica se um caractere é um token válido.

Parâmetros:
char src: O caractere a ser verificado.
Retorno:true se o caractere for um token válido; false caso contrário.

Detalhes:Esta função considera um caractere como válido se ele for um caractere especial (!), um caractere alfanumérico (de # a ~), ou um caractere de tabulação (\t). Todos os outros caracteres são considerados inválidos.

17.2 int check_dquote(char *str, int counter)
Descrição:Verifica a posição de fechamento de uma aspa dupla em uma string.

Parâmetros:
char *str: A string a ser verificada.
int counter: O índice atual na string.
Retorno:O índice da posição após a aspa dupla de fechamento, ou o índice atual se não houver fechamento.

Detalhes:Esta função verifica se o caractere na posição counter é uma aspa dupla ("). Se for, ela avança até encontrar a próxima aspa dupla. Se não encontrar uma aspa dupla de fechamento (ou seja, se chegar ao final da string), retorna o índice atual. Caso contrário, retorna o índice após a aspa dupla de fechamento.

17.3 int check_squote(char *str, int counter)
Descrição:Verifica a posição de fechamento de uma aspa simples em uma string.

Parâmetros:
char *str: A string a ser verificada.
int counter: O índice atual na string.
Retorno:O índice da posição após a aspa simples de fechamento, ou o índice atual se não houver fechamento.

Detalhes:Esta função funciona de maneira semelhante a check_dquote, mas verifica aspas simples ('). Ela avança até encontrar a próxima aspa simples e retorna o índice após a aspa de fechamento, ou o índice atual se não encontrar uma aspa de fechamento.

17.4 int check_type_quote(char *cmd_line, int x)
Descrição:Verifica o tipo de citação (simples ou dupla) em uma linha de comando e retorna a posição de fechamento.

Parâmetros:
char *cmd_line: A linha de comando a ser verificada.
int x: O índice atual na linha de comando.
Retorno:O índice da posição após a aspa de fechamento, ou o índice atual se não houver fechamento.

Detalhes:Esta função verifica se o caractere na posição x é uma aspa dupla ou simples. Dependendo do tipo de aspa, chama a função apropriada (check_dquote ou check_squote) para encontrar a posição de fechamento. Se não houver aspas, retorna o índice atual.

                    TOKEN_FILTER1

18.1 void filter_args(t_sh *sh, int n)
Descrição:Filtra os argumentos de um token com base em suas propriedades.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int n: Índice do token a ser filtrado.

Detalhes:Esta função verifica se o token possui certas propriedades (como aspas, redirecionamentos, pipes, etc.) e, se não tiver, marca o token como um argumento (arg = true). Se o token contiver aspas, variáveis de ambiente ou for um arquivo, também é marcado como argumento.

18.2 void filter_envp(t_sh *sh, int n)
Descrição:Filtra variáveis de ambiente em um token.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int n: Índice do token a ser filtrado.

Detalhes:Esta função verifica se o token começa com um cifrão ($). Se sim, ela verifica se o restante do token consiste em letras maiúsculas, cifrões ou o caractere de interrogação (?). Se o token for apenas uma variável de ambiente, marca exp_e como verdadeiro. Se o token começa com um til (~), verifica se é uma referência ao diretório home e marca exp_t como verdadeiro.

18.3 void filter_cmds(t_sh *sh, int n)
Descrição:Filtra comandos a partir dos tokens.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int n: Índice do token a ser filtrado.

Detalhes:Esta função verifica se o token é um comando. Se for o primeiro token e não contiver pipes ou redirecionamentos, ele é marcado como um comando (cmd = true). Se não for o primeiro token, mas o token anterior for um pipe, também é marcado como um comando. O número total de comandos (cmds_num) é incrementado.

18.4 void filter_tokens(t_sh *sh)
Descrição:Filtra todos os tokens em uma linha de comando.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função itera sobre todos os tokens e aplica várias funções de filtragem, incluindo filter_quotes, filter_envp, filter_file, filter_pipes_redir, filter_args e filter_cmds. Cada token é processado para determinar suas propriedades e classificações.

                    TOKEN_FILTER2

19.1 void filter_file(t_sh *sh, int n)
Descrição:Filtra os tokens para identificar se eles representam arquivos.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int n: Índice do token a ser filtrado.

Detalhes:Esta função verifica se o token contém um ponto (.), que é um indicativo de que pode ser um arquivo. Se encontrar um ponto, marca o token como um arquivo (file = true). Além disso, se o token anterior for um redirecionamento de heredoc, também marca o token atual como um arquivo e desmarca como argumento.

19.2 static void check_filter_redir(t_sh *sh, int n)
Descrição:Verifica e filtra redirecionamentos de saída em um token.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int n: Índice do token a ser filtrado.

Detalhes:Esta função verifica se o token começa com um sinal de maior (>). Se o token for apenas >, marca como redirecionamento de saída (r_out = true). Se o token for >>, marca como redirecionamento de saída com anexação (r_outappend = true). Em ambos os casos, incrementa o contador de redirecionamentos.

19.3 void filter_pipes_redir(t_sh *sh, int n)
Descrição:Filtra tokens para identificar pipes e redirecionamentos.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int n: Índice do token a ser filtrado.

Detalhes:Esta função verifica se o token não está entre aspas e, em seguida, verifica se é um pipe (|) ou um redirecionamento de entrada (<). Se for um pipe, marca como tal e incrementa o contador de pipes. Se for um redirecionamento de entrada, verifica se é um redirecionamento simples ou de heredoc e marca o token adequadamente. Chama a função check_filter_redir para verificar redirecionamentos de saída.

19.4 void filter_quotes(t_sh *sh, int n, int x)
Descrição:Filtra tokens para identificar aspas simples e duplas.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int n: Índice do token a ser filtrado.
int x: Índice auxiliar para iteração.

Detalhes:Esta função verifica se o token começa com uma aspa dupla (") ou simples ('). Se começar com uma aspa dupla, verifica se contém um cifrão ($) e marca exp_e como verdadeiro se encontrado. Se a última aspa dupla estiver presente e o comprimento do token for maior que 1, marca d_quote como verdadeiro; caso contrário, marca f_quote como verdadeiro. O mesmo processo é aplicado para aspas simples.

                        TOKEN

20.1 int count_tokens(t_sh *sh)
Descrição:Conta o número de tokens em uma linha de comando.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
Retorno:O número total de tokens encontrados na linha de comando.

Detalhes:Esta função itera sobre a linha de comando, ignorando espaços em branco e contando tokens com base em aspas e caracteres válidos. Se encontrar aspas, chama check_type_quote para determinar a posição de fechamento. A função também conta tokens que terminam com caracteres válidos antes de um espaço ou no final da linha.

20.2 bool counter_validation(int c)
Descrição:Valida se um caractere é um token válido.

Parâmetros:
int c: O caractere a ser verificado.
Retorno:true se o caractere for válido; false caso contrário.

Detalhes:Esta função considera um caractere como válido se ele for um caractere especial (!), ou se estiver entre os intervalos de caracteres definidos (de # a & e de ( a ~).

20.3 static bool check_if_special_redirin(char *str, int x)
Descrição:Verifica se um caractere em uma string é um redirecionamento de entrada especial.

Parâmetros:
char *str: A string a ser verificada.
int x: O índice do caractere a ser verificado.
Retorno:true se o caractere for um redirecionamento de entrada especial; false caso contrário.

Detalhes:Esta função verifica se o caractere na posição x é um sinal de menor (<). Se for, verifica se o próximo caractere é outro sinal de menor e se o caractere seguinte é imprimível. Se o próximo caractere for imprimível, retorna true.

20.4 static bool check_if_special_redirout(char *str, int x)
Descrição:Verifica se um caractere em uma string é um redirecionamento de saída especial.

Parâmetros:
char *str: A string a ser verificada.
int x: O índice do caractere a ser verificado.
Retorno:true se o caractere for um redirecionamento de saída especial; false caso contrário.

Detalhes:Esta função funciona de maneira semelhante a check_if_special_redirin, mas verifica se o caractere é um sinal de maior (>). Ela verifica se o próximo caractere é outro sinal de maior e se o caractere seguinte é imprimível.

20.5 static bool check_if_special_redir(char *str, int x)
Descrição:Verifica se um caractere em uma string é um redirecionamento especial (entrada ou saída).

Parâmetros:
char *str: A string a ser verificada.
int x: O índice do caractere a ser verificado.

Retorno:true se o caractere for um redirecionamento especial; false caso contrário.

Detalhes:Esta função chama check_if_special_redirin e check_if_special_redirout para determinar se o caractere em x é um redirecionamento especial. Retorna true se qualquer uma das funções retornar true.

20.6 static int process_chunk(char *str, char *temp, int *x_o, int *x_d)
Descrição:Processa um pedaço da string de entrada e armazena o resultado em uma string temporária.

Parâmetros:
char *str: A string de entrada a ser processada.
char *temp: A string temporária onde o resultado será armazenado.
int *x_o: Ponteiro para o índice atual na string de entrada.
int *x_d: Ponteiro para o índice atual na string temporária.

Retorno:O novo índice na string de entrada após o processamento.

Detalhes:Esta função verifica se o caractere atual é um redirecionamento especial e processa o token correspondente. Se encontrar aspas, processa o conteúdo entre as aspas. A função também adiciona espaços conforme necessário e atualiza os índices.

20.7 char *prepare_line(char *str)
Descrição:Prepara uma linha de comando, processando e formatando os tokens.

**Parâmetros:

                        PIPE

21.1 void setup_pipes(int **pipes, int i, int cmds_num)
Descrição:Configura os pipes para redirecionar a entrada e saída dos comandos em um pipeline.

Parâmetros:
int **pipes: Array de pipes que contém os descritores de arquivo para cada comando.
int i: Índice do comando atual.
int cmds_num: Número total de comandos no pipeline.

Detalhes:Esta função usa dup2 para redirecionar a entrada e saída padrão (STDIN e STDOUT) para os pipes apropriados, dependendo da posição do comando no pipeline. Fecha todos os pipes após a configuração para evitar vazamentos de descritores.

21.2 static void prep_cmds_pipes(t_sh *sh)
Descrição:Prepara os comandos para execução em um pipeline.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função itera sobre os comandos armazenados na estrutura sh e chama prep_cmd para cada comando, preparando-os para execução.

21.3 void execute_pipeline(t_sh *sh, int n_cmds)
Descrição:Executa uma sequência de comandos em um pipeline.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int n_cmds: Número total de comandos a serem executados.

Detalhes:Esta função cria um pipe para cada comando e usa fork para criar um novo processo para cada um. Redireciona a entrada e saída conforme necessário e executa os comandos. Se um comando for um built-in, chama exec_builtin. Após a execução, fecha os descritores de pipe e espera que todos os processos filhos terminem.

21.4 void check_pipes(t_sh *sh)
Descrição:Verifica se há pipes na linha de comando e, se houver, inicia a execução do pipeline.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função itera sobre os tokens e conta quantos pipes (|) existem. Se encontrar pelo menos um pipe, chama execute_pipeline para processar os comandos em um pipeline.

                        ERRORS

22.1 bool filter_cmd_error(t_sh *sh)
Descrição:Verifica se há erros relacionados aos comandos, como permissões e existência.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Retorno:true se houver um erro; false caso contrário.

Detalhes:Esta função itera sobre os comandos armazenados na estrutura sh. Para cada comando, verifica se ele existe e se tem permissão de execução. Se o comando não existir, imprime uma mensagem de erro e define o status global g_status como CMD_NOT_FOUND. Se o comando existir, mas não tiver permissão de execução, imprime uma mensagem de erro e define g_status como NO_PERMISSION.

22.2 static bool filter_tkerrors2(t_sh *sh)
Descrição:Verifica erros de sintaxe relacionados a redirecionamentos no início ou no final da linha de comando.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Retorno:true se houver um erro de sintaxe; false caso contrário.

Detalhes:Esta função verifica se o primeiro ou o último token é um redirecionamento (heredoc, entrada ou saída). Se for, imprime uma mensagem de erro de sintaxe e define o status global g_status como SYNTAX_MISPELL.

22.3 static bool filter_tkerrors(t_sh *sh)
Descrição:Verifica erros de sintaxe relacionados a pipes e redirecionamentos.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
Retorno:true se houver um erro de sintaxe; false caso contrário.

Detalhes:Esta função verifica se o número de tokens é igual ao número de pipes ou se o primeiro token é um pipe. Se qualquer uma dessas condições for verdadeira, imprime uma mensagem de erro de sintaxe e define o status global g_status como SYNTAX_MISPELL. Também chama filter_tkerrors2 para verificar erros adicionais.

22.4 static bool verify_error_helper(t_sh *sh, int x)
Descrição:Verifica erros específicos em comandos, como pipes vazios e permissões de arquivos.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
int x: Índice do comando a ser verificado.
Retorno:true se houver um erro; false caso contrário.

Detalhes:Esta função itera sobre os comandos e verifica se há erros relacionados a pipes vazios ou permissões de arquivos de entrada e saída. Se encontrar um erro, imprime uma mensagem apropriada e define o status global g_status conforme necessário.

22.5 bool verify_errors(t_sh *sh)
Descrição:Verifica se há erros gerais na linha de comando.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
Retorno:true se houver um erro; false caso contrário.

Detalhes:Esta função chama filter_tkerrors para verificar erros de sintaxe. Se houver erros de expansão ou análise, imprime uma mensagem de erro e define o status global g_status como WRONG_SYNTAX. Se houver erros de token, também imprime uma mensagem de erro. Por fim, chama verify_error_helper para verificar erros específicos nos comandos.


                    FREE

23.1 void handbrake_and_exit(t_sh *sh)
Descrição:Finaliza a execução do shell e libera os recursos, definindo o status de saída apropriado.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função define o status do shell como false, atualiza o status global g_status para indicar que a saída foi causada por um sinal de interrupção (SIGQUIT) e chama a função ft_exit para realizar a finalização do shell.

23.2 void free_tokens(t_sh *sh)
Descrição:Libera a memória alocada para os tokens da linha de comando.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
Detalhes:Esta função itera sobre os tokens armazenados na estrutura sh e libera a memória alocada para cada token. Após liberar todos os tokens, também libera o array de tokens.

23.3 void free_cmds(t_sh *sh)
Descrição:Libera a memória alocada para os comandos executados.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função itera sobre os comandos armazenados na estrutura sh e libera a memória alocada para cada comando, incluindo seus argumentos e arquivos de entrada/saída. Após liberar todos os comandos, também libera o array de comandos.

23.4 void free_env(t_sh *sh)
Descrição:Libera a memória alocada para as variáveis de ambiente.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função itera sobre as variáveis de ambiente armazenadas na estrutura sh e libera a memória alocada para cada variável. Após liberar todas as variáveis de ambiente, também libera o array de variáveis de ambiente.

23.5 void free_exit(t_sh *sh)
Descrição:Libera todos os recursos alocados pelo shell e finaliza a execução.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.

Detalhes:Esta função chama free_tokens, free_cmds, e free_env para liberar os recursos alocados. Se a linha de comando (cmd_line) estiver alocada, também a libera. Por fim, chama rl_clear_history para limpar o histórico de comandos.


                    BUILTINS
            
                        CD

B1. static char *going_dir_up(char *oldpwd)
Descrição:Modifica a string oldpwd para apontar para o diretório pai.

Parâmetros:
char *oldpwd: A string que representa o caminho do diretório atual.
Retorno:Um ponteiro para a string oldpwd, agora modificada para apontar para o diretório pai.

Detalhes:Esta função percorre a string oldpwd de trás para frente, removendo caracteres até encontrar a última barra (/). Quando a barra é encontrada, a função a substitui por um terminador nulo (\0), efetivamente encurtando o caminho para o diretório pai.

B2. static void set_dir(t_sh *sh, char *dir)
Descrição:Altera o diretório de trabalho atual para o diretório especificado.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char *dir: O diretório para o qual mudar.

Detalhes:Verifica se o diretório foi especificado; se não, imprime uma mensagem de erro.
Obtém o diretório de trabalho atual usando getcwd.
Se o diretório especificado for .., chama going_dir_up para modificar o caminho.
Tenta mudar para o diretório especificado usando chdir. Se falhar, imprime uma mensagem de erro.
Atualiza a variável de ambiente OLDPWD com o diretório anterior.
Obtém o novo diretório de trabalho e atualiza a variável de ambiente PWD com o novo caminho.
Define sh->error.exit_error como false se a operação for bem-sucedida.

B3. void ft_cd(t_sh *sh, char **args)
Descrição:Implementa o comando cd para mudar o diretório de trabalho.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char **args: Array de argumentos passados para o comando cd.

Detalhes:Verifica se há muitos argumentos; se sim, imprime uma mensagem de erro.
Se um argumento for fornecido, chama set_dir para mudar para o diretório especificado.
Se nenhum argumento for fornecido, busca o diretório HOME usando search_envp e muda para esse diretório.

                            ECHO

B1. void ft_echo(t_sh *sh, char **args)
Descrição:Implementa o comando echo, que imprime os argumentos fornecidos na saída padrão.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char **args: Array de argumentos passados para o comando echo.

Detalhes:Inicializa um índice i para percorrer os argumentos e uma flag n_flag para verificar se a opção -n foi fornecida.
Se o primeiro argumento for -n, define n_flag como 1 e incrementa i para começar a imprimir a partir do próximo argumento.
Itera sobre os argumentos restantes, imprimindo cada um na saída padrão. Se houver mais argumentos após o atual, imprime um espaço entre eles.
Se a flag n_flag não estiver ativada, imprime uma nova linha após todos os argumentos.
Define sh->error.exit_error como false e atualiza o status global g_status para EXIT_SUCCESS, indicando que a operação foi bem-sucedida.

                    ENV

B1. void ft_env(t_sh *sh, char **args)
Descrição:Implementa o comando env, que imprime as variáveis de ambiente atuais.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char **args: Array de argumentos passados para o comando env.

Detalhes:Verifica se o primeiro argumento é -i. Se for, a função retorna sem fazer nada, pois a opção -i indica que o ambiente deve ser ignorado.
Se houver um argumento adicional (que não seja -i), imprime uma mensagem de erro indicando que o arquivo ou diretório especificado não existe, e define sh->error.exit_error como true.
Se não houver argumentos, itera sobre as variáveis de ambiente armazenadas em sh->envp, imprimindo cada uma na saída padrão, seguida de uma nova linha.
Define sh->error.exit_error como false, indicando que a operação foi bem-sucedida.


                            EXIT

B1. static int is_valid_number(char *str)
Descrição:Verifica se a string fornecida representa um número válido.

Parâmetros:
char *str: A string a ser verificada.
Retorno:1 se a string for um número válido, 0 caso contrário.

Detalhes:Ignora um sinal de mais (+) ou menos (-) no início da string.
Itera sobre os caracteres restantes da string, verificando se todos são dígitos. Se encontrar um caractere que não seja um dígito, retorna 0.
Se todos os caracteres forem dígitos, retorna 1, indicando que a string é um número válido.

2. void ft_exit(t_sh *sh, char **args)
Descrição:Finaliza a execução do shell, liberando recursos e definindo o código de saída apropriado.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char **args: Array de argumentos passados para o comando exit.

Detalhes:Define exit_code como o valor de g_status se ele não for -1.
Se não houver argumentos, chama free_exit para liberar recursos e sai com o exit_code.
Se houver mais de um argumento, imprime uma mensagem de erro indicando que há muitos argumentos e define sh->error.exit_error como true.
Se houver um argumento, verifica se ele é um número válido usando is_valid_number. Se não for, imprime uma mensagem de erro e sai com o código 255.
Se o argumento for válido, converte a string para um inteiro usando ft_atoi e define exit_code com esse valor.
Por fim, chama free_exit para liberar recursos e sai com o exit_code.


                            EXPORT

B1. static int get_var_pos(t_sh *sh, char *var)
Descrição:Obtém a posição de uma variável de ambiente na lista de variáveis do shell.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char *var: A variável a ser buscada.
Retorno:O índice da variável se encontrada, ou -1 se não for encontrada.
Detalhes:Calcula o comprimento da variável até o sinal de igual (=).
Itera sobre as variáveis de ambiente armazenadas em sh->envp, comparando cada uma com a variável fornecida.
Retorna o índice da variável se encontrada, ou -1 se não for.

B2. static void update_var(t_sh *sh, char *var)
Descrição:Atualiza ou adiciona uma variável de ambiente na lista de variáveis do shell.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char *var: A variável a ser atualizada ou adicionada.

Detalhes:Chama get_var_pos para verificar se a variável já existe.
Se a variável existir, libera a memória da variável antiga e substitui-a pela nova.
Se a variável não existir, aloca um novo array de strings para armazenar as variáveis de ambiente, copia as variáveis existentes e adiciona a nova variável.
Atualiza o total de variáveis de ambiente em sh->vars.envp_total.

B3. static int valid_var(char *var)
Descrição:Verifica se uma string é um identificador de variável válido.

Parâmetros:
char *var: A string a ser verificada.
Retorno:1 se a string for um identificador válido, 0 caso contrário.

Detalhes:Retorna 0 se a variável for nula, começar com um sinal de igual (=) ou começar com um dígito.
Itera sobre os caracteres da string, verificando se cada um é um caractere alfanumérico ou um sublinhado (_).
Retorna 1 se todos os caracteres forem válidos.

4. void ft_export(t_sh *sh, char **args)
Descrição:Implementa o comando export, que adiciona ou atualiza variáveis de ambiente.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char **args: Array de argumentos passados para o comando export.

Detalhes:Itera sobre os argumentos fornecidos, começando do índice 1.
Para cada argumento, verifica se é um identificador válido usando valid_var.
Se o argumento for válido e contiver um sinal de igual (=), chama update_var para atualizar ou adicionar a variável.
Se o argumento não for válido, imprime uma mensagem de erro indicando que não é um identificador válido e define sh->error.exit_error como true.
Se não houver argumentos, chama ft_env para imprimir as variáveis de ambiente atuais.

                        PWD

B1. void ft_pwd(t_sh *sh, char **args)
Descrição:Implementa o comando pwd, que imprime o diretório de trabalho atual.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char **args: Array de argumentos passados para o comando pwd.

Detalhes:Verifica se há argumentos fornecidos. Se houver, imprime uma mensagem de erro indicando que nenhum argumento é aceito.
Se não houver argumentos, itera sobre as variáveis de ambiente armazenadas em sh->envp para encontrar a variável PWD.
Quando encontra a variável PWD, usa ft_substr para extrair o valor do diretório de trabalho atual (omitindo o prefixo PWD=) e imprime esse valor na saída padrão, seguido de uma nova linha.
Se a variável PWD não for encontrada ou se houver um erro ao acessar o diretório, imprime uma mensagem de erro apropriada e define sh->error.exit_error como true.


                            UNSET

B1. static bool check_wrong_args(char **args)
Descrição:Verifica se algum dos argumentos fornecidos contém um sinal de igual (=), o que tornaria o nome do parâmetro inválido para o comando unset.

Parâmetros:
char **args: Array de argumentos passados para o comando unset.
Retorno:true se algum argumento for inválido, false caso contrário.
Detalhes:Itera sobre cada argumento e, para cada um, verifica se contém um sinal de igual (=).
Se encontrar um argumento inválido, imprime uma mensagem de erro e retorna true.
Se todos os argumentos forem válidos, retorna false.

2. void ft_unset(t_sh *sh, char **args)
Descrição:Implementa o comando unset, que remove variáveis de ambiente.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
char **args: Array de argumentos passados para o comando unset.

Detalhes:Chama check_wrong_args para verificar se há argumentos inválidos. Se houver, retorna sem fazer nada.
Aloca memória para um novo array de strings envx, que armazenará as variáveis de ambiente restantes após a remoção.
Itera sobre as variáveis de ambiente em sh->envp, copiando todas as variáveis que não correspondem ao argumento fornecido (ou seja, que não devem ser removidas) para o novo array envx.
Após a iteração, define o último elemento de envx como NULL para indicar o final da lista.
Libera a memória da lista antiga de variáveis de ambiente usando free_env.
Atualiza sh->envp para apontar para o novo array envx e decrementa o contador de variáveis de ambiente em sh->vars.envp_total.

                        MAIN

M1. static void sh_loop(t_sh *sh)
Descrição:Executa o loop principal do shell, gerenciando a leitura e execução de comandos.

Parâmetros:
t_sh *sh: Estrutura que contém informações sobre o shell.
Detalhes:Esta função inicia um ciclo de execução do shell. Ela:
Inicializa o ciclo com init_cycle.
Obtém o prompt chamando get_prompt.
Lê a linha de comando usando readline.
Se a linha de comando for nula, chama handbrake_and_exit para finalizar o shell.
Adiciona a linha de comando ao histórico.
Se a linha de comando não estiver vazia, prepara a linha, conta os tokens, inicializa os tokens, divide os comandos, filtra os tokens, expande variáveis, inicializa o parser, preenche o parser e executa os comandos.
Após a execução, libera a memória alocada para os tokens e comandos.

M2. int main(int ac, char **av, char **envp)
Descrição:Função principal que inicializa o shell e entra no loop de execução.

Parâmetros:
int ac: Contador de argumentos da linha de comando (não utilizado).
char **av: Array de argumentos da linha de comando (não utilizado).
char **envp: Array de variáveis de ambiente.

Retorno:EXIT_FAILURE se a alocação de memória falhar; 0 caso contrário.
Detalhes:Ignora os argumentos da linha de comando.
Aloca memória para a estrutura t_sh.
Se a alocação falhar, retorna EXIT_FAILURE.
Obtém as variáveis de ambiente chamando ft_getenv.
Inicializa o gerenciamento de erros com init_error.
Entra em um loop infinito chamando sh_loop para processar os comandos do usuário.
Após a saída do loop (nunca alcançada neste código), limpa o histórico de comandos.